# Generated by Django 2.0.3 on 2018-04-20 09:39

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('surname', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=100, unique=True)),
                ('jwt_secret', models.UUIDField(default=uuid.uuid4)),
                ('username', models.CharField(max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'abstract': False,
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AllowedRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('notify_overdue_n_days', models.IntegerField()),
                ('display_priority', models.BooleanField(default=False)),
                ('display_size', models.BooleanField(default=False)),
                ('display_deadline', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('card_id', models.AutoField(primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=1024)),
                ('size', models.FloatField()),
                ('number', models.IntegerField()),
                ('type_silver', models.BooleanField(default=False)),
                ('type_rejected', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField()),
                ('started_at', models.DateTimeField()),
                ('deadline', models.DateTimeField()),
                ('display_offset', models.IntegerField()),
                ('assigned_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CardLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('card_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Card')),
            ],
        ),
        migrations.CreateModel(
            name='CardPriority',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('title', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wip_restriction', models.FloatField()),
                ('display_offset', models.IntegerField()),
                ('title', models.CharField(max_length=100)),
                ('board_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Board')),
                ('parent_column_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.Column')),
            ],
        ),
        migrations.CreateModel(
            name='ColumnPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allow', models.BooleanField(default=False)),
                ('from_column_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='column_permissions_from_column', to='backend.Column')),
            ],
        ),
        migrations.CreateModel(
            name='DeleteReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='DeveloperGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='DeveloperGroupMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=False)),
                ('developer_group_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.DeveloperGroup')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('developer_group_membership_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.DeveloperGroupMembership')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_id', models.CharField(max_length=500)),
                ('subscriber_name', models.CharField(max_length=300)),
                ('title', models.CharField(max_length=300)),
                ('started_at', models.DateField()),
                ('ended_at', models.DateField()),
                ('active', models.BooleanField(default=False)),
                ('card_active', models.BooleanField(default=False)),
                ('board_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.Board')),
                ('developer_group_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.DeveloperGroup')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estimated_hours', models.IntegerField()),
                ('description', models.CharField(max_length=400)),
                ('done', models.BooleanField(default=False)),
                ('assigned_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('card_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Card')),
            ],
        ),
        migrations.CreateModel(
            name='WipViolation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('card_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Card')),
                ('column_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Column')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WipViolationReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=500)),
            ],
        ),
        migrations.AddField(
            model_name='wipviolation',
            name='wip_violation_reason_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.WipViolationReason'),
        ),
        migrations.AddField(
            model_name='grouprole',
            name='role_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Role'),
        ),
        migrations.AddField(
            model_name='columnpermissions',
            name='role_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Role'),
        ),
        migrations.AddField(
            model_name='columnpermissions',
            name='to_column_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='column_permission_to_column', to='backend.Column'),
        ),
        migrations.AddField(
            model_name='cardlog',
            name='from_column_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_log_from_column', to='backend.Column'),
        ),
        migrations.AddField(
            model_name='cardlog',
            name='to_column_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='card_log_to_column', to='backend.Column'),
        ),
        migrations.AddField(
            model_name='card',
            name='card_priority_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.CardPriority'),
        ),
        migrations.AddField(
            model_name='card',
            name='column_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Column'),
        ),
        migrations.AddField(
            model_name='card',
            name='delete_reason_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.DeleteReason'),
        ),
        migrations.AddField(
            model_name='card',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Project'),
        ),
        migrations.AddField(
            model_name='board',
            name='type_acceptance_testing_column_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='type_acceptance_testing_column', to='backend.Column'),
        ),
        migrations.AddField(
            model_name='board',
            name='type_left_border_column_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='type_left_border_column', to='backend.Column'),
        ),
        migrations.AddField(
            model_name='board',
            name='type_priority_column_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='type_priority_column', to='backend.Column'),
        ),
        migrations.AddField(
            model_name='board',
            name='type_right_border_column_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='type_right_border_column', to='backend.Column'),
        ),
        migrations.AddField(
            model_name='allowedrole',
            name='role_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Role'),
        ),
        migrations.AddField(
            model_name='allowedrole',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='allowedrole',
            unique_together={('user_id', 'role_id')},
        ),
    ]
